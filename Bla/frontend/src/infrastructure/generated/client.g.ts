//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module ChargingStationBackendClient {

export class ChargerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    postCharger(chargerDto: ChargerDto): Promise<void> {
        let url_ = this.baseUrl + "/Charger/AddChargingStation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(chargerDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostCharger(_response);
        });
    }

    protected processPostCharger(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postSimulationInput(simulationInputDto: SimulationInputDto): Promise<void> {
        let url_ = this.baseUrl + "/Charger/AddSimulationInput";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(simulationInputDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostSimulationInput(_response);
        });
    }

    protected processPostSimulationInput(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getCharger(): Promise<ChargingStation[]> {
        let url_ = this.baseUrl + "/Charger/GetChargingStationList";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCharger(_response);
        });
    }

    protected processGetCharger(response: Response): Promise<ChargingStation[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChargingStation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ChargingStation[]>(null as any);
    }

    getOutPut(): Promise<SimulationOutput[]> {
        let url_ = this.baseUrl + "/Charger/getOutput";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOutPut(_response);
        });
    }

    protected processGetOutPut(response: Response): Promise<SimulationOutput[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SimulationOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SimulationOutput[]>(null as any);
    }
}

export class ChargerDto implements IChargerDto {
    chargingPower?: number;

    constructor(data?: IChargerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chargingPower = _data["chargingPower"];
        }
    }

    static fromJS(data: any): ChargerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChargerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chargingPower"] = this.chargingPower;
        return data;
    }

    clone(): ChargerDto {
        const json = this.toJSON();
        let result = new ChargerDto();
        result.init(json);
        return result;
    }
}

export interface IChargerDto {
    chargingPower?: number;
}

export class SimulationInputDto implements ISimulationInputDto {
    chargingStations?: ChargingStationDto[];
    averageConsumptionOfCars?: number;
    arrivalProbabilityMultiplier?: number;

    constructor(data?: ISimulationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["chargingStations"])) {
                this.chargingStations = [] as any;
                for (let item of _data["chargingStations"])
                    this.chargingStations!.push(ChargingStationDto.fromJS(item));
            }
            this.averageConsumptionOfCars = _data["averageConsumptionOfCars"];
            this.arrivalProbabilityMultiplier = _data["arrivalProbabilityMultiplier"];
        }
    }

    static fromJS(data: any): SimulationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimulationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.chargingStations)) {
            data["chargingStations"] = [];
            for (let item of this.chargingStations)
                data["chargingStations"].push(item.toJSON());
        }
        data["averageConsumptionOfCars"] = this.averageConsumptionOfCars;
        data["arrivalProbabilityMultiplier"] = this.arrivalProbabilityMultiplier;
        return data;
    }

    clone(): SimulationInputDto {
        const json = this.toJSON();
        let result = new SimulationInputDto();
        result.init(json);
        return result;
    }
}

export interface ISimulationInputDto {
    chargingStations?: ChargingStationDto[];
    averageConsumptionOfCars?: number;
    arrivalProbabilityMultiplier?: number;
}

export class ChargingStationDto implements IChargingStationDto {
    chargingPower?: number;
    chargingValuesForEachDayAndHour?: number[][];

    constructor(data?: IChargingStationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chargingPower = _data["chargingPower"];
            if (Array.isArray(_data["chargingValuesForEachDayAndHour"])) {
                this.chargingValuesForEachDayAndHour = [] as any;
                for (let item of _data["chargingValuesForEachDayAndHour"])
                    this.chargingValuesForEachDayAndHour!.push(item);
            }
        }
    }

    static fromJS(data: any): ChargingStationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChargingStationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chargingPower"] = this.chargingPower;
        if (Array.isArray(this.chargingValuesForEachDayAndHour)) {
            data["chargingValuesForEachDayAndHour"] = [];
            for (let item of this.chargingValuesForEachDayAndHour)
                data["chargingValuesForEachDayAndHour"].push(item);
        }
        return data;
    }

    clone(): ChargingStationDto {
        const json = this.toJSON();
        let result = new ChargingStationDto();
        result.init(json);
        return result;
    }
}

export interface IChargingStationDto {
    chargingPower?: number;
    chargingValuesForEachDayAndHour?: number[][];
}

export class ChargingStation implements IChargingStation {
    id?: number;
    chargingPower?: number;
    chargingValuesForEachDayAndHour?: number[][];

    constructor(data?: IChargingStation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.chargingPower = _data["chargingPower"];
            if (Array.isArray(_data["chargingValuesForEachDayAndHour"])) {
                this.chargingValuesForEachDayAndHour = [] as any;
                for (let item of _data["chargingValuesForEachDayAndHour"])
                    this.chargingValuesForEachDayAndHour!.push(item);
            }
        }
    }

    static fromJS(data: any): ChargingStation {
        data = typeof data === 'object' ? data : {};
        let result = new ChargingStation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["chargingPower"] = this.chargingPower;
        if (Array.isArray(this.chargingValuesForEachDayAndHour)) {
            data["chargingValuesForEachDayAndHour"] = [];
            for (let item of this.chargingValuesForEachDayAndHour)
                data["chargingValuesForEachDayAndHour"].push(item);
        }
        return data;
    }

    clone(): ChargingStation {
        const json = this.toJSON();
        let result = new ChargingStation();
        result.init(json);
        return result;
    }
}

export interface IChargingStation {
    id?: number;
    chargingPower?: number;
    chargingValuesForEachDayAndHour?: number[][];
}

export class SimulationOutput implements ISimulationOutput {
    id?: number;
    chargingStationSimulationResult?: ChargingStation[];
    totalEnergyCharged?: number;
    numberOfChargingEventsPerYear?: number;
    numberOfChargingEventsPerMonth?: number;
    numberOfChargingEventsPerWeek?: number;
    numberOfChargingEventsPerDay?: number;
    deviationOfConcurrencyFactor?: number;

    constructor(data?: ISimulationOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["chargingStationSimulationResult"])) {
                this.chargingStationSimulationResult = [] as any;
                for (let item of _data["chargingStationSimulationResult"])
                    this.chargingStationSimulationResult!.push(ChargingStation.fromJS(item));
            }
            this.totalEnergyCharged = _data["totalEnergyCharged"];
            this.numberOfChargingEventsPerYear = _data["numberOfChargingEventsPerYear"];
            this.numberOfChargingEventsPerMonth = _data["numberOfChargingEventsPerMonth"];
            this.numberOfChargingEventsPerWeek = _data["numberOfChargingEventsPerWeek"];
            this.numberOfChargingEventsPerDay = _data["numberOfChargingEventsPerDay"];
            this.deviationOfConcurrencyFactor = _data["deviationOfConcurrencyFactor"];
        }
    }

    static fromJS(data: any): SimulationOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SimulationOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.chargingStationSimulationResult)) {
            data["chargingStationSimulationResult"] = [];
            for (let item of this.chargingStationSimulationResult)
                data["chargingStationSimulationResult"].push(item.toJSON());
        }
        data["totalEnergyCharged"] = this.totalEnergyCharged;
        data["numberOfChargingEventsPerYear"] = this.numberOfChargingEventsPerYear;
        data["numberOfChargingEventsPerMonth"] = this.numberOfChargingEventsPerMonth;
        data["numberOfChargingEventsPerWeek"] = this.numberOfChargingEventsPerWeek;
        data["numberOfChargingEventsPerDay"] = this.numberOfChargingEventsPerDay;
        data["deviationOfConcurrencyFactor"] = this.deviationOfConcurrencyFactor;
        return data;
    }

    clone(): SimulationOutput {
        const json = this.toJSON();
        let result = new SimulationOutput();
        result.init(json);
        return result;
    }
}

export interface ISimulationOutput {
    id?: number;
    chargingStationSimulationResult?: ChargingStation[];
    totalEnergyCharged?: number;
    numberOfChargingEventsPerYear?: number;
    numberOfChargingEventsPerMonth?: number;
    numberOfChargingEventsPerWeek?: number;
    numberOfChargingEventsPerDay?: number;
    deviationOfConcurrencyFactor?: number;
}

export class ChargingStationBackendException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isChargingStationBackendException = true;

    static isChargingStationBackendException(obj: any): obj is ChargingStationBackendException {
        return obj.isChargingStationBackendException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ChargingStationBackendException(message, status, response, headers, null);
}

}